/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export default class EventHub {
  eventMap: Map<string, Array<Object>> = new Map<string, Array<Object>>();

  on(event: string, callback: Object) {
    if (!this.eventMap.get(event)) {
      this.eventMap.set(event, new Array<Object>());
    }
    let array: Array<Object> = this.eventMap.get(event) as Array<Object>;
    if (array.indexOf(callback) === -1) {
        array.push(callback);
    }
  }

  off(event: string, callback: Object) {
    if (this.eventMap.get(event)) {
      let cbArray: Array<Object> = this.eventMap.get(event) as Array<Object>;
      let index: number = cbArray.indexOf(callback);
      if (index > -1) {
        for (; index + 1 < cbArray.length; index++) {
          cbArray[index] = cbArray[index + 1];
        }
        cbArray.pop();
      }
    }
  }

  off(event: string) {
    if (this.eventMap.get(event)) {
      this.eventMap.delete(event);
    }
  }

  emit<P1>(event:string, p1: P1) {
    if (this.eventMap.get(event)) {
      const array: Array<Object> = this.eventMap.get(event) as Array<Object>;
      const cloneArray = deepcopy<Array<Object>>(array) as Array<Object>;
      const len = cloneArray.length;
      for (let i = 0; i < len; ++i) {
        try {
          let f = cloneArray[i] as (p1: P1) => void;
          f(p1);
        } catch (e: Error) {
          console.log(e);
          continue;
        }
      }
    }
  }

  emit<P1, P2>(event: string, p1: P1, p2: P2) {
    if (this.eventMap.get(event)) {
      const array: Array<Object> = this.eventMap.get(event) as Array<Object>;
      const cloneArray = deepcopy<Array<Object>>(array) as Array<Object>;
      const len = cloneArray.length;
      for (let i = 0; i < len; ++i) {
        try {
          const f = cloneArray[i] as (p1: P1, p2: P2) => void;
          f(p1, p2);
        } catch (e: Error) {
          console.log(e);
          continue;
        }
      }
    }
  }

  emit<P1, P2, P3>(event: string, p1: P1, p2: P2, p3: P3) {
    if (this.eventMap.get(event)) {
      const array: Array<Object> = this.eventMap.get(event) as Array<Object>;
      const cloneArray = deepcopy<Array<Object>>(array) as Array<Object>;
      const len = cloneArray.length;
      for (let i = 0; i < len; ++i) {
        try {
          const f = cloneArray[i] as (p1: P1, p2: P2, p3: P3) => void;
          f(p1, p2, p3);
        } catch (e: Error) {
          console.log(e);
          continue;
        }
      }
    }
  }

  emit<P1, P2, P3, P4>(event: string, p1: P1, p2: P2, p3: P3, p4: P4) {
    if (this.eventMap.get(event)) {
      const array: Array<Object> = this.eventMap.get(event) as Array<Object>;
      const cloneArray = deepcopy<Array<Object>>(array) as Array<Object>;
      const len = cloneArray.length;
      for (let i = 0; i < len; ++i) {
        try {
          const f = cloneArray[i] as (p1: P1, p2: P2, p3: P3, p4: P4) => void;
          f(p1, p2, p3, p4);
        } catch (e: Error) {
          console.log(e);
          continue;
        }
      }
    }
  }

  emit<P1, P2, P3, P4, P5>(event: string, p1: P1, p2: P2, p3: P3, p4: P4, p5: P5) {
    if (this.eventMap.get(event)) {
      const array: Array<Object> = this.eventMap.get(event) as Array<Object>;
      const cloneArray = deepcopy<Array<Object>>(array) as Array<Object>;
      const len = cloneArray.length;
      for (let i = 0; i < len; ++i) {
        try {
          const f = cloneArray[i] as (p1: P1, p2: P2, p3: P3, p4: P4, p5: P5) => void;
          f(p1, p2, p3, p4, p5);
        } catch (e: Error) {
          console.log(e);
          continue;
        }
      }
    }
  }  
}