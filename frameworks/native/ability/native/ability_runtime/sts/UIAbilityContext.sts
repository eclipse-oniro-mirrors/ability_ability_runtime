/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Want} from './@ohos.app.ability.Want';
import StartOptions from './@ohos.app.ability.StartOptions'

export class BusinessError {
  code: int;
  data?: string;
}

type MyFun<T> = (err: BusinessError, data: T) => void;
export class AsyncCallback<T> {
  myFun_:MyFun<T> = (err: BusinessError, data: T) => {}

  constructor(myFun:MyFun<T>){
    console.log("AsyncCallback");
    this.myFun_ = myFun;
  }

  invoke(err: BusinessError, data: T) : void {
    this.myFun_(err, data);
  }
}

export class AbilityResult {
  resultCode: int
}

export default class UIAbilityContext {
  public native startAbilitySync(want: Want, callback:AsyncCallback<void>): int;
  public native startAbilitySync(want: Want): int;
  public native nativeStartAbilityForResult(want: Want, callback:AsyncCallback<AbilityResult>): void;
  public native nativeStartAbilityForResult(want: Want, startOptions: StartOptions, callback:AsyncCallback<AbilityResult>): void;
  public native terminateSelfSync(): void;
  public native terminateSelfSyncPromise(): void;
  public native reportDrawnCompletedSync(): void;
  public nativeContext : long;

  startAbility(want: Want, callback: MyFun<void>):void{
    console.log("call startAbility callback 111");
    let myCall = new AsyncCallback<void>(callback);
    let p1 = launch this.startAbilitySync(want, myCall);
    console.log("call startAbility callback 222");
    p1.then((e : int)=>{
      // callback();
      console.log("e" + e);
      console.log("call startAbility callback 333");
    });
    console.log("call startAbility callback 444");
  }

  // startAbility(want: Want, callback: AsyncCallback<void>): void;
  // startAbility(want: Want, options: StartOptions, callback: AsyncCallback<void>): void;
  // startAbility(want: Want, options?: StartOptions): Promise<void>;
  startAbility(want: Want): Promise<int> {
    console.log("startAbility Promise");
    let p = new Promise<int>((resolve: (r1 : int)=>void, reject:(err: string)=>void):void => {
      console.log("startAbility Promise 111");
      let p1 = launch this.startAbilitySync(want);
      console.log("startAbility Promise 222");
      p1.then((e : int)=>{
        // callback();
      console.log("startAbility Promise 333");
        console.log("eee" + e);
        if (e == 0) {
          resolve(e);
        } else {
          reject("error");
        }

      });
      console.log("startAbility Promise 444");
    });
    return p;
  }

  startAbilityForResult(want: Want, callback: MyFun<AbilityResult>):void{
    console.log("call startAbility callback 111");
    let myCall = new AsyncCallback<AbilityResult>(callback);
    launch this.nativeStartAbilityForResult(want, myCall);
    console.log("call startAbility callback 222");
  }

  startAbilityForResult(want: Want, startOptions: StartOptions, callback: MyFun<AbilityResult>):void{
    console.log("call startAbility callback 111");
    let myCall = new AsyncCallback<AbilityResult>(callback);
    launch this.nativeStartAbilityForResult(want, startOptions, myCall);
    console.log("call startAbility callback 222");
  }

  startAbilityForResult(want: Want, startOptions?: StartOptions): Promise<AbilityResult>{
    console.log("call startAbility callback 111");
    let p = new Promise<AbilityResult>((resolve: (data: AbilityResult)=>void, reject:(err: BusinessError)=>void):void => {
      let myCall = new AsyncCallback<AbilityResult>((err: BusinessError, data: AbilityResult)=>{
        if (err.code == 0) {
          resolve(data);
        } else {
          reject(err);
        }
      });
      if (startOptions) {
        launch this.nativeStartAbilityForResult(want, startOptions, myCall);
      } else {
        launch this.nativeStartAbilityForResult(want, myCall);
      }
    });
    console.log("call startAbility callback 222");
    return p;
  }

  terminateSelf(callback:() => void): void {
    console.log("call startAbility callback 111");
    let p1 = launch UIAbilityContext.terminateSelfSync();
    console.log("call startAbility callback 222");
    p1.then<void>(()=>{
      callback();
      console.log("call startAbility callback 333");
    });
    console.log("call startAbility callback 444");
  }

  terminateSelf(): Promise<void> {
    console.log("terminateSelf Promise 111");
    let p = new Promise<void>((resolve: () => void): void => {
        console.log("terminateSelf Promise 222");
        let p1 = launch UIAbilityContext.terminateSelfSyncPromise();
        console.log("terminateSelf Promise 333");
        p1.then<void>(():void=>{
          resolve();
          console.log("terminateSelf Promise 444");
        });
    });
        console.log("terminateSelf Promise 555");
        return p;
  }

  reportDrawnCompleted(callback:() => void): void {
    console.log("reportDrawnCompleted callback 111");
    let p1 = launch UIAbilityContext.reportDrawnCompletedSync();
    console.log("reportDrawnCompleted callback 222");
    p1.then<void>(()=>{
      //callback();
      console.log("reportDrawnCompleted callback 333");
    });
    console.log("reportDrawnCompleted callback 444");
  }
}
