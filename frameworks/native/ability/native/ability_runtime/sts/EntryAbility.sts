/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {UIAbility} from './@ohos.app.ability.UIAbility';
import {Want} from './@ohos.app.ability.Want';
import StartOptions from './@ohos.app.ability.StartOptions';
import {BusinessError, AbilityResult} from './UIAbilityContext';
import {AbilityConstant} from './@ohos.app.ability.AbilityConstant';

class EntryAbility extends UIAbility {

  textStartAbility(want:Want, launchParam: AbilityConstant.LaunchParam): void {
    console.log("startAbility 11111 ");
    // this.context?.startAbility(want, (err: BusinessError, result: AbilityResult) => {
    //   console.log(`startAbility failed, code is ${err.code}`);
    //   console.log(`startAbility failed, AbilityResult is ${result.resultCode}`);
    //   if (err.code) {
    //     console.log(`startAbility failed, code is ${err.code}`);
    //     return;
    //   }
    //   console.info('startAbility succeed');
    // });

    let options = new StartOptions();
    options.displayId = 1;
    this.context?.startAbility(want, options, (err: BusinessError, result: AbilityResult) => {
      console.log(`startAbility failed, code is ${err.code}`);
      console.log(`startAbility failed, AbilityResult is ${result.resultCode}`);
      if (err.code) {
        console.log(`startAbility failed, code is ${err.code}`);
        return;
      }
      console.info('startAbility succeed');
    });


    // let p1 = this.context?.startAbility(want);
    // p1?.then<void>(() : void=>{
    //   console.log("call startAbility callback 111");
    // }).catch((err : string): void =>{
    //   console.log("err" + err);
    //   console.log("call startAbility callback 222");
    // });


    console.log("startAbility 22222 ");
  }

  textStartAbilityForResult(want:Want): void {
    let cb1 = (err:int) => {
      console.log("startAbilityForResult cb 1 ");
      console.log("startAbilityForResult err: " + err);
    };
    let options = new StartOptions();
    options.displayId = 1;

    // this.context?.startAbilityForResult(want, (err: BusinessError, result: AbilityResult) => {
    //   console.log(`startAbilityForResult failed, code is ${err.code}`);
    //   console.log(`startAbilityForResult failed, AbilityResult is ${result.resultCode}`);
    //   if (err.code) {
    //     console.log(`startAbilityForResult failed, code is ${err.code}`);
    //     return;
    //   }
    //   console.info('startAbilityForResult succeed');
    // });

    this.context?.startAbilityForResult(want, options, (err: BusinessError, result: AbilityResult) => {
      console.log(`startAbilityForResult failed, code is ${err.code}`);
      console.log(`startAbilityForResult failed, AbilityResult is ${result.resultCode}`);
      if (err.code) {
        console.log(`startAbilityForResult failed, code is ${err.code}`);
        return;
      }
      console.info('startAbilityForResult succeed');
    });
    console.log("startAbility 6666 ");

    // let p1 = this.context?.startAbilityForResult(want, options);
    // p1?.then<void>(() : void=>{
    //   console.log("call startAbility callback 111");
    // }).catch((err : string): void =>{
    //   console.log("err" + err);
    //   console.log("call startAbility callback 222");
    // });
  }

  textTerminateSelfWithResult(want: Want): void {
    let res:AbilityResult  = new AbilityResult();
    res.resultCode = 1;
    res.want = want;
    console.log("terminateSelfWithResult 11111 ");
    this.context?.terminateSelfWithResult(res, (err: BusinessError, result: AbilityResult) => {
      console.log(`startAbility failed, code is ${err.code}`);
      console.log(`startAbility failed, AbilityResult is ${result.resultCode}`);
      if (err.code) {
        console.log(`startAbility failed, code is ${err.code}`);
        return;
      }
      console.info('startAbility succeed');
    });
    console.log("terminateSelfWithResult 22222 ");


    // let p1 = this.context?.terminateSelfWithResult(res);
    // p1?.then<void>(() : void=>{
    //   console.log("call terminateSelfWithResult callback 111");
    // }).catch((err : string): void =>{
    //   console.log("err" + err);
    //   console.log("call terminateSelfWithResult callback 222");
    // });
  }



  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void{
    console.log("onCreate");
    console.log("bundleName " + want?.bundleName);
    console.log("launchReason " + launchParam?.launchReason.toString());
    console.log("lastExitReason " + launchParam?.lastExitReason.toString());
    console.log("this.context.nativeContext " + this.context?.nativeContext);

    // console.log("lastExitMessage " + launchParam.lastExitMessage);

    // console.log("config.language : " + this.context?.config?.language);
    // console.log("config.displayId : " + this.context?.config?.displayId);
    // console.log("config.hasPointerDevice : " + this.context?.config?.hasPointerDevice);
    // console.log("config.fontId : " + this.context?.config?.fontId);
    // console.log("config.fontSizeScale : " + this.context?.config?.fontSizeScale);
    // console.log("config.fontWeightScale : " + this.context?.config?.fontWeightScale);
    // console.log("config.mcc : " + this.context?.config?.mcc);
    // console.log("config.mnc : " + this.context?.config?.mnc);
  
    // 调试中
    // console.log("config.colorMode : " + this.context?.config?.colorMode?.toString());
    // console.log("config.direction : " + this.context?.config?.direction?.toString());
    // console.log("config.screenDensity : " + this.context?.config?.screenDensity.toString());

    // console.log("bundleName : " + this.context?.abilityInfo?.bundleName);
    // console.log("moduleName : " + this.context?.abilityInfo?.moduleName);
    // console.log("name : " + this.context?.abilityInfo?.name);
    // console.log("label : " + this.context?.abilityInfo?.label);
    // console.log("labelId: " + this.context?.abilityInfo?.labelId);
    // console.log("description : " + this.context?.abilityInfo?.description);
    // console.log("descriptionId: " + this.context?.abilityInfo?.descriptionId);
    // console.log("icon : " + this.context?.abilityInfo?.icon);

    // console.log("iconId: " + this.context?.abilityInfo?.iconId);
    // console.log("process : " + this.context?.abilityInfo?.process);
    // // console.log("exported: " + this.context?.abilityInfo?.exported);
    // // console.log("permissions: " + this.context?.abilityInfo?.permissions);
    // console.log("readPermission : " + this.context?.abilityInfo?.readPermission);
    // console.log("writePermission : " + this.context?.abilityInfo?.writePermission);
    // console.log("uri : " + this.context?.abilityInfo?.uri);
    // // console.log("deviceTypes: " + this.context?.abilityInfo?.deviceTypes);
    // console.log("enabled: " + this.context?.abilityInfo?.enabled);
    // console.log("excludeFromDock: " + this.context?.abilityInfo?.excludeFromDock);
    // console.log("appIndex: " + this.context?.abilityInfo?.appIndex);
    // // console.log("orientationId: " + this.context?.abilityInfo?.orientationId);

    // this.textStartAbility(want, launchParam);
    // this.textStartAbilityForResult(want);
    // this.textTerminateSelfWithResult(want);
  }
}