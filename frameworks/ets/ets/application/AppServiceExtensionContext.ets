/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License"),
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { BusinessError } from '@ohos.base';
import AsyncCallbackWrapper from '../utils/AbilityUtils';
import ExtensionContext from 'application.ExtensionContext';
import { ConnectOptions } from 'ability.connectOptions';
import Want from '@ohos.app.ability.Want';
import StartOptions from '@ohos.app.ability.StartOptions';

class Cleaner {
  public ptr: long = 0;
  constructor(ptr: long) {
    this.ptr = ptr;
  }
  native clean(): void;
}
export function callback(cleaner: Cleaner): void {
  cleaner.clean();
}
let destroyRegister = new FinalizationRegistry<Cleaner>(callback);
let unregisterToken = new object();
export default class AppServiceExtensionContext extends ExtensionContext {
  static {
    loadLibrary("app_service_extension_context_ani_kit.z");
  }

  constructor(context: long) {
    super();
    if (this.nativeEtsContext == 0) {
      this.nativeEtsContext = context;
    }
    this.registerCleaner(this.nativeEtsContext);
  }
    nativeEtsContext: long = 0;
    private cleaner: Cleaner | null = null;
    registerCleaner(ptr: long): void {
      this.cleaner = new Cleaner(ptr);
      destroyRegister.register(this, this.cleaner!, unregisterToken);
  }
  unregisterCleaner(): void {
    destroyRegister.unregister(unregisterToken);
  }

  public native nativeConnectAppServiceExtensionAbility(want: Want, callback: ConnectOptions): long;
  public native nativeDisconnectAppServiceExtensionAbility(connection: long,
    callback: AsyncCallbackWrapper<void>): void;
  public native nativeStartAbility(want: Want, callback: AsyncCallbackWrapper<void>): void;
  public native nativeStartAbility(want: Want, options: StartOptions, callback: AsyncCallbackWrapper<void>): void;
  public native nativeTerminateSelf(callback: AsyncCallbackWrapper<void>): void;
  private static native nativeTransferStatic(input: ESValue, type: string): Object;
  private static native nativeTransferDynamic(input: Object): ESValue;
  private static contextType: string = 'AppServiceExtensionContext';

  connectAppServiceExtensionAbility(want: Want, callback: ConnectOptions): long {
    return this.nativeConnectAppServiceExtensionAbility(want, callback);
  }

  disconnectAppServiceExtensionAbility(connection: long): Promise<void> {
    let p =
      new Promise<void>((resolve: (data: undefined) => void, reject: (err: BusinessError) => void): void => {
        let myCall = new AsyncCallbackWrapper<void>((err: BusinessError | null) => {
          if (err == null || err.code == 0) {
            resolve(undefined);
          } else {
            reject(err);
          }
        });
        taskpool.execute((): void => {
          this.nativeDisconnectAppServiceExtensionAbility(connection, myCall);
      });
    });
    return p;
  }

  startAbility(want: Want, options?: StartOptions): Promise<void> {
    return new Promise<void>((resolve: (data: undefined) => void, reject: (err: BusinessError) => void): void => {
      let asyncCallback = new AsyncCallbackWrapper<void>((err: BusinessError | null) => {
        if (err == null || err.code == 0) {
          resolve(undefined);
        } else {
          reject(err);
        }
      });
      taskpool.execute((): void => {
        if (options == null) {
          this.nativeStartAbility(want, asyncCallback);
        } else {
          this.nativeStartAbility(want, options, asyncCallback);
        }
      }).catch((err: Error): void => {
        reject(err as BusinessError);
      });
    });
  }

  terminateSelf(): Promise<void> {
    let p = new Promise<void>((resolve:(data: undefined)=>void, reject:(err: BusinessError)=>void): void => {
      let myCall = new AsyncCallbackWrapper<void>((err: BusinessError | null) => {
        if (err == null || err.code == 0) {
          resolve(undefined);
        } else {
          reject(err);
        }
      });
      taskpool.execute((): void => {
        this.nativeTerminateSelf(myCall);
      });
    });
    return p;
  }

  static transferStatic(input: Any): Object {
    let type: string = '';
    try {
      type = ESValue.wrap(input).getProperty('__context_impl__').getProperty('contextType').toString();
    } catch (err) {
      console.log('transferStatic err: ' + err.toString());
    }
    console.log('transferStatic type: ' + type);
    return AppServiceExtensionContext.nativeTransferStatic(ESValue.wrap(input), type);
  }

  static transferDynamic(input: Object): Any {
    return AppServiceExtensionContext.nativeTransferDynamic(input).unwrap();
  }
}