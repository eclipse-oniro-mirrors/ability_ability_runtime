# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

config("ani_common_public_config") {
  visibility = [ ":*" ]
  include_dirs = [ "include" ]
}

ohos_shared_library("ani_common") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }

  include_dirs = [
    "./include",
    "${ability_runtime_innerkits_path}/app_manager/include/appmgr",
    "${ability_runtime_path}/frameworks/ets/ani/enum_convert",
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_runtime/app",
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_runtime/context",
    "${ability_runtime_path}/interfaces/kits/native/ability/native",
    "${ability_runtime_services_path}/common/include",
  ]

  public_configs = [ ":ani_common_public_config" ]

  sources = [
    "src/ani_common_ability_result.cpp",
    "src/ani_common_ability_state_data.cpp",
    "src/ani_common_configuration.cpp",
    "src/ani_common_execute_param.cpp",
    "src/ani_common_execute_result.cpp",
    "src/ani_common_start_options.cpp",
    "src/ani_common_util.cpp",
    "src/ani_common_want.cpp",
    "src/context_transfer.cpp",
    "src/ets_application_context_utils.cpp",
    "src/ets_context_utils.cpp",
    "src/ets_data_struct_converter.cpp",
    "src/ets_error_utils.cpp",
    "src/ets_extension_context.cpp",
    "src/ets_free_install_observer.cpp",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_innerkits_path}/ability_manager:ability_start_options",
    "${ability_runtime_innerkits_path}/ability_manager:process_options",
    "${ability_runtime_innerkits_path}/ability_manager:start_window_option",
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_innerkits_path}/runtime:runtime",
    "${ability_runtime_native_path}/ability/native:ability_business_error",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_native_path}/appkit:app_context",
    "${ability_runtime_native_path}/appkit:application_context_manager",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:session_info",
    "ability_base:want",
    "access_token:libtokenid_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:bms_ani_common",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "image_framework:image_ani",
    "ipc:ipc_core",
    "ipc:ipc_napi",
    "json:nlohmann_json_static",
    "napi:ace_napi",
    "resource_management:global_resmgr",
    "resource_management:resmgr_napi_core",
    "resource_management:resourceManager_ani",
    "runtime_core:ani",
  ]

  innerapi_tags = [ "platformsdk" ]
  subsystem_name = "ability"
  part_name = "ability_runtime"
}
