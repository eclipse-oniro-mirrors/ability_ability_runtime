# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

config("appmgr_config") {
  include_dirs = [
    "include",
    "include/utils",
    "${ability_runtime_innerkits_path}/ability_manager/include",
    "${ability_runtime_services_path}/common/include",
    "${ability_runtime_path}/tools/aa/include",
    "${ability_runtime_path}/utils/global/time/include",
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_bundle_manager_helper",
    "${ability_runtime_utils_path}/global/constant",
  ]
}

group("appms_target") {
  deps = [ ":libappms" ]
}

ohos_shared_library("libappms") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"
  shlib_type = "sa"
  include_dirs = [ "${ability_runtime_services_path}/appdfr/include" ]
  sources = [
    "${ability_runtime_path}/tools/aa/src/shell_command_result.cpp",
    "${ability_runtime_path}/tools/aa/src/test_observer_proxy.cpp",
    "src/ability_running_record.cpp",
    "src/advanced_security_mode_manager.cpp",
    "src/ams_mgr_scheduler.cpp",
    "src/app_config_data_manager.cpp",
    "src/app_death_recipient.cpp",
    "src/app_debug_manager.cpp",
    "src/app_lifecycle_deal.cpp",
    "src/app_mgr_event.cpp",
    "src/app_mgr_service.cpp",
    "src/app_mgr_service_event_handler.cpp",
    "src/app_mgr_service_inner.cpp",
    "src/app_preloader.cpp",
    "src/app_running_manager.cpp",
    "src/app_running_record.cpp",
    "src/app_running_status_module.cpp",
    "src/app_spawn_client.cpp",
    "src/app_state_observer_manager.cpp",
    "src/cache_process_manager.cpp",
    "src/child_process_record.cpp",
    "src/exit_resident_process_manager.cpp",
    "src/modal_system_app_freeze_uiextension.cpp",
    "src/module_running_record.cpp",
    "src/quick_fix_callback_with_record.cpp",
    "src/remote_client_manager.cpp",
    "src/render_state_observer_manager.cpp",
    "src/window_focus_changed_listener.cpp",
    "src/window_visibility_changed_listener.cpp",
  ]

  defines = [ "AMS_LOG_TAG = \"AppMgrService\"" ]
  defines += [ "AMS_LOG_DOMAIN = 0xD001303" ]
  defines += [ "OHOS_ACCOUNT_ENABLED" ]

  if (product_name != "ohcore") {
    defines += [ "APP_MGR_SERVICE_APPMS" ]
  }

  if (ability_command_for_test) {
    defines += [ "ABILITY_COMMAND_FOR_TEST" ]
  }

  if (ability_fault_and_exit_test) {
    defines += [ "ABILITY_FAULT_AND_EXIT_TEST" ]
  }

  configs = [ ":appmgr_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_innerkits_path}/deps_wrapper:ability_deps_wrapper",
    "${ability_runtime_innerkits_path}/uri_permission:uri_permission_mgr",
    "${ability_runtime_native_path}/appkit:appkit_manager_helper",
    "${ability_runtime_path}/utils/global/freeze:freeze_util",
    "${ability_runtime_path}/utils/server/startup:startup_util",
    "${ability_runtime_services_path}/common:app_util",
    "${ability_runtime_services_path}/common:event_report",
    "${ability_runtime_services_path}/common:perm_verification",
    "${ability_runtime_services_path}/common:res_sched_util",
    "${ability_runtime_services_path}/common:task_handler_wrap",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:configuration",
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "appspawn:appspawn_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "ffrt:libffrt",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "json:nlohmann_json_static",
    "kv_store:distributeddata_inner",
    "memmgr:memmgrclient",
    "memory_utils:libmeminfo",
    "os_account:libaccountkits",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
  public_external_deps = [ "kv_store:distributeddata_mgr" ]

  if (product_name != "ohcore") {
    external_deps += [ "netmanager_base:net_conn_manager_if" ]
  }

  if (ability_runtime_feature_sandboxmanager) {
    external_deps += [ "sandbox_manager:libsandbox_manager_sdk" ]
    defines += [ "ABILITY_RUNTIME_FEATURE_SANDBOXMANAGER" ]
  }

  if (ability_runtime_graphics) {
    defines += [
      "SUPPORT_GRAPHICS",
      "SUPPORT_SCREEN",
    ]

    deps += []
    external_deps += [
      "i18n:intl_util",
      "window_manager:libwm",
      "window_manager:libwsutils",
    ]
  }
  cflags_cc = []
  if (os_dlp_part_enabled) {
    cflags_cc += [ "-DWITH_DLP" ]
  }
  if (background_task_mgr_continuous_task_enable) {
    defines += [ "BGTASKMGR_CONTINUOUS_TASK_ENABLE" ]
  }

  if (is_asan || asan_detector) {
    defines += [ "SUPPORT_ASAN" ]
  }

  if (ability_runtime_app_no_response_dialog) {
    defines += [ "APP_NO_RESPONSE_DIALOG" ]
  }
  cflags += [ "-DAPP_NO_RESPONSE_BUNDLENAME=\"${ability_runtime_app_no_response_bundlename}\"" ]

  version_script = "libappms.map"
  subsystem_name = "ability"
  part_name = "ability_runtime"
}
