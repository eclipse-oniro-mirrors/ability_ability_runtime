# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/ability_runtime/tools"

config("tools_aa_config_mock") {
  include_dirs = [ "${ability_runtime_path}/tools/test/mock" ]
}

tools_aa_mock_sources =
    [ "${ability_runtime_path}/tools/test/mock/mock_ability_manager_stub.cpp" ]

ohos_unittest("aa_command_test") {
  module_out_path = module_output_path

  sources = [ "aa_command_test.cpp" ]
  sources += tools_aa_mock_sources

  configs = [ ":tools_aa_config_mock" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_path}/tools/aa:tools_aa_source_set",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:configuration",
    "bundle_framework:appexecfwk_base",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("aa_command_ability_first_test") {
  module_out_path = module_output_path

  sources = [ "aa_command_ability_first_test.cpp" ]
  sources += tools_aa_mock_sources

  configs = [ ":tools_aa_config_mock" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_path}/tools/aa:tools_aa_source_set",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:configuration",
    "bundle_framework:appexecfwk_base",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("aa_command_start_test") {
  module_out_path = module_output_path

  sources = [ "aa_command_start_test.cpp" ]
  sources += tools_aa_mock_sources

  configs = [ ":tools_aa_config_mock" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_path}/tools/aa:tools_aa_source_set",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:configuration",
    "bundle_framework:appexecfwk_base",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("aa_command_stop_service_test") {
  module_out_path = module_output_path

  sources = [ "aa_command_stop_service_test.cpp" ]
  sources += tools_aa_mock_sources

  configs = [ ":tools_aa_config_mock" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_path}/tools/aa:tools_aa_source_set",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:configuration",
    "bundle_framework:appexecfwk_base",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("aa_command_dump_test") {
  module_out_path = module_output_path

  sources = [ "aa_command_dump_test.cpp" ]
  sources += tools_aa_mock_sources

  configs = [ ":tools_aa_config_mock" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_path}/tools/aa:tools_aa_source_set",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:configuration",
    "bundle_framework:appexecfwk_base",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("aa_command_dumpsys_test") {
  module_out_path = module_output_path

  sources = [ "aa_command_dumpsys_test.cpp" ]
  sources += tools_aa_mock_sources

  configs = [ ":tools_aa_config_mock" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_path}/tools/aa:tools_aa_source_set",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:configuration",
    "bundle_framework:appexecfwk_base",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("aa_command_force_stop_test") {
  module_out_path = module_output_path

  sources = [ "aa_command_force_stop_test.cpp" ]
  sources += tools_aa_mock_sources

  configs = [ ":tools_aa_config_mock" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_path}/tools/aa:tools_aa_source_set",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:configuration",
    "bundle_framework:appexecfwk_base",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("aa_command_force_timeout_test") {
  module_out_path = module_output_path

  sources = [ "aa_command_force_timeout_test.cpp" ]
  sources += tools_aa_mock_sources

  configs = [ ":tools_aa_config_mock" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_path}/tools/aa:tools_aa_source_set",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:configuration",
    "bundle_framework:appexecfwk_base",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("aa_command_test_test") {
  module_out_path = module_output_path

  sources = [ "aa_command_test_test.cpp" ]
  sources += tools_aa_mock_sources

  configs = [ ":tools_aa_config_mock" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_path}/tools/aa:tools_aa_source_set",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:configuration",
    "bundle_framework:appexecfwk_base",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("aa_command_attach_test") {
  module_out_path = module_output_path

  sources = [ "aa_command_attach_test.cpp" ]

  configs = [ ":tools_aa_config_mock" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [ "${ability_runtime_path}/tools/aa:tools_aa_source_set" ]

  external_deps = [
    "ability_base:configuration",
    "bundle_framework:appexecfwk_base",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("aa_command_send_memory_level_test") {
  module_out_path = module_output_path

  sources = [ "aa_command_send_memory_level_test.cpp" ]
  sources += tools_aa_mock_sources

  configs = [ ":tools_aa_config_mock" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_path}/tools/aa:tools_aa_source_set",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:configuration",
    "bundle_framework:appexecfwk_base",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("ability_tool_convert_util_test") {
  module_out_path = module_output_path

  sources = [ "ability_tool_convert_util_test.cpp" ]

  configs = [ ":tools_aa_config_mock" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [ "${ability_runtime_path}/tools/aa:tools_aa_source_set" ]

  external_deps = [
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

group("unittest") {
  testonly = true

  deps = [
    ":aa_command_ability_first_test",
    ":aa_command_attach_test",
    ":aa_command_dump_test",
    ":aa_command_dumpsys_test",
    ":aa_command_force_stop_test",
    ":aa_command_start_test",
    ":aa_command_stop_service_test",
    ":aa_command_test",
    ":aa_command_test_test",
    ":aa_command_send_memory_level_test",
    ":ability_tool_convert_util_test",
  ]
  if (ability_command_for_test) {
    deps += [ ":aa_command_force_timeout_test" ]
  }
}
