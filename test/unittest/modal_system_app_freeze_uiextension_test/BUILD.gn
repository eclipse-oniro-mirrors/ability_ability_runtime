# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

ohos_unittest("modal_system_app_freeze_uiextension_test") {
  module_out_path = "ability_runtime/ability_runtime/ability_call_test"

  defines = [
    "APP_NO_RESPONSE_DIALOG=1",
    "APP_NO_RESPONSE_BUNDLENAME=\"com.huawei.hmos.abnormal\"",
  ]

  include_dirs = [
    "${ability_runtime_test_path}/mock/common/include",
    "${ability_runtime_test_path}/mock/mock_appmgr_service/include",
    "${ability_runtime_test_path}/mock/mock_sa_call",
    "${ability_runtime_test_path}/mock/services_appmgr_test/include",
    "${ability_runtime_path}/services/abilitymgr/include",
  ]

  sources = [
    "${ability_runtime_services_path}/appmgr/src/modal_system_app_freeze_uiextension.cpp",
    "modal_system_app_freeze_uiextension_test.cpp",
  ]

  configs = [ "${ability_runtime_services_path}/appmgr:appmgr_config" ]

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_innerkits_path}/ability_manager:mission_info",
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "${ability_runtime_services_path}/common:perm_verification",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/aakit:aakit_mock",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core:appexecfwk_appmgr_mock",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core:appexecfwk_bundlemgr_mock",
    "${ability_runtime_native_path}/appkit:appkit_native",
    "${ability_runtime_path}/utils/server/startup:startup_util",
    "${ability_runtime_services_path}/appmgr:libappms",
    "${ability_runtime_services_path}/common:app_util",
    "${ability_runtime_services_path}/common:res_sched_util",
    "${ability_runtime_services_path}/common:task_handler_wrap",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbeget_proxy",
    "ipc:ipc_core",
    "napi:ace_napi",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libwsutils",
    "window_manager:scene_session",
    "window_manager:session_manager_lite",
  ]

  if (ability_runtime_dsoftbus_enable) {
    external_deps += [ "dsoftbus:softbus_client" ]
  }

  if (ability_command_for_test) {
    defines += [ "ABILITY_COMMAND_FOR_TEST" ]
  }

  if (ability_runtime_graphics) {
    external_deps += [
      "window_manager:libwm",
      "window_manager:libwsutils",
    ]
  }
  if (ability_runtime_upms) {
    deps += [
      "${ability_runtime_innerkits_path}/uri_permission:uri_permission_mgr",
    ]
  }
}

group("unittest") {
  testonly = true
  deps = [ ":modal_system_app_freeze_uiextension_test" ]
}
