# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/appmgr"

ohos_unittest("ams_mgr_scheduler_test") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  module_out_path = module_output_path
  cflags_cc = []
  include_dirs = [
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_bundle_manager_helper",
    "${ability_runtime_services_path}/appmgr/include",
    "${ability_runtime_test_path}/mock/mock_sa_call",
    "${distributedschedule_path}/samgr/interfaces/innerkits/samgr_proxy/include",
    "mock/include",
  ]

  sources = [
    "${ability_runtime_services_path}/appmgr/src/ams_mgr_scheduler.cpp",
    "${ability_runtime_test_path}/mock/services_appmgr_test/src/mock_bundle_manager.cpp",
    "${ability_runtime_test_path}/mock/services_appmgr_test/src/mock_overlay_manager.cpp",
    "mock/src/mock_my_flag.cpp",
    "mock/src/mock_permission_verification.cpp",
  ]

  sources += [ "ams_mgr_scheduler_test.cpp" ]

  configs = [ "${ability_runtime_test_path}/unittest:appmgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_native_path}/appkit:appkit_manager_helper",
    "${ability_runtime_services_path}/appmgr:libappms",
    "${ability_runtime_services_path}/common:perm_verification",
    "${ability_runtime_services_path}/common:task_handler_wrap",
    "${ability_runtime_test_path}/unittest:appmgr_test_source",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "appspawn:appspawn_client",
    "bundle_framework:appexecfwk_core",
    "ffrt:libffrt",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]

  defines = [ "AMS_LOG_TAG = \"AppMgrService\"" ]

  if (ability_command_for_test) {
    defines += [ "ABILITY_COMMAND_FOR_TEST" ]
  }

  if (ability_runtime_graphics) {
    defines += [ "SUPPORT_GRAPHICS" ]
    deps += []
    external_deps += [
      "i18n:intl_util",
      "window_manager:libwm",
    ]
  }
  cflags_cc = []
  if (os_dlp_part_enabled) {
    cflags_cc += [ "-DWITH_DLP" ]
  }
}

group("unittest") {
  testonly = true
  deps = [ ":ams_mgr_scheduler_test" ]
}
