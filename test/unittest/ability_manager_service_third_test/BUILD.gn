# Copyright (c) 2022-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")
import("//foundation/ability/ability_runtime/test/unittest/ability_manager_service_third_test/abilitymgr.gni")

module_output_path = "ability_runtime/ability_runtime/abilitymgr"

ohos_unittest("ability_manager_service_third_test") {
  module_out_path = module_output_path
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  include_dirs = [
    "${ability_runtime_innerkits_path}/uri_permission/include",
    "${ability_runtime_path}/interfaces/kits/native/ability/ability_runtime/",
    "${ability_runtime_path}/interfaces/inner_api/ability_manager/include",
    "${ability_runtime_innerkits_path}/foreground_app_obs_manager/include",
    "${ability_runtime_services_path}/abilitymgr/include/utils",
    "${ability_runtime_services_path}/abilitymgr/include",
    "${ability_runtime_abilitymgr_path}/include/foreground_app_connection_manager/",
    "${ability_runtime_path}/services/abilitymgr/include/insight_intent",
    "${ability_runtime_services_path}/common/include",
    "${ability_runtime_test_path}/mock/mock_sa_call",
    "${ability_runtime_test_path}/unittest/ability_manager_client_branch_test",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/aakit/include",
    "${ability_runtime_services_path}/appdfr/include",
    "${ability_runtime_path}/interfaces/kits/native/ability/native/ui_service_extension_ability/connection",
    "${ability_runtime_services_path}/abilitymgr/include/mission",
    "mock/include",
  ]

  sources = [
    "ability_manager_service_third_test.cpp",
    "mock/src/mock_free_install_manager.cpp",
    "mock/src/mock_want_utils.cpp",
    "${ability_runtime_innerkits_path}/uri_permission/src/uri_permission_load_callback.cpp",
    "${ability_runtime_services_path}/common/src/ffrt_task_handler_wrap.cpp",
    "${ability_runtime_services_path}/common/src/queue_task_handler_wrap.cpp",
    "${ability_runtime_services_path}/common/src/task_handler_wrap.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_manager_service.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/preload_manager_service.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/report_data_partition_usage_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/utils/request_id_util.cpp",
  ]
  sources += abilityms_files

  configs = [
    "${ability_runtime_services_path}/abilitymgr:abilityms_config",
    "${ability_runtime_services_path}/abilitymgr:abilityms_exception_config",
  ]

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_connect_callback_stub",
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_innerkits_path}/ability_manager:ability_start_setting",
    "${ability_runtime_innerkits_path}/ability_manager:ability_start_options",
    "${ability_runtime_innerkits_path}/ability_manager:mission_info",
    "${ability_runtime_innerkits_path}/ability_manager:process_options",
    "${ability_runtime_innerkits_path}/ability_manager:start_window_option",
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_innerkits_path}/connectionobs_manager:connection_obs_manager",
    "${ability_runtime_innerkits_path}/deps_wrapper:ability_deps_wrapper",
    "${ability_runtime_innerkits_path}/foreground_app_obs_manager:foreground_app_obs_manager",
    "${ability_runtime_innerkits_path}/session_handler:session_handler",
    "${ability_runtime_innerkits_path}/uri_permission:uri_permission_mgr",
    "${ability_runtime_native_path}/ability/native:ability_business_error",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_native_path}/ability/native:auto_startup_callback",
    "${ability_runtime_native_path}/appkit:appkit_manager_helper",
    "${ability_runtime_path}/utils/global/freeze:freeze_util",
    "${ability_runtime_path}/utils/server/startup:startup_util",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "${ability_runtime_services_path}/abilitymgr:wantagent_manager",
    "${ability_runtime_services_path}/common:app_util",
    "${ability_runtime_services_path}/common:perm_verification",
    "${ability_runtime_services_path}/common:task_handler_wrap",
    "${ability_runtime_services_path}/common:user_controller",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/aakit:aakit_mock",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:configuration",
    "ability_base:extractortool",
    "ability_base:session_info",
    "ability_base:view_data",
    "ability_base:want",
    "ability_base:zuri",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "bundle_framework:libappexecfwk_common",
    "c_utils:utils",
    "cJSON:cjson",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "faultloggerd:libbacktrace_local",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "icu:shared_icuuc",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "json:nlohmann_json_static",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "qos_manager:concurrent_task_client",
    "relational_store:native_appdatafwk",
    "relational_store:native_dataability",
    "relational_store:native_rdb",
    "safwk:api_cache_manager",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
    "window_manager:libmodal_system_ui_extension_client",
    "window_manager:libwsutils",
    "window_manager:scene_session",
    "window_manager:session_manager_lite",
    "window_manager:sms",
  ]
  if (ability_runtime_dsoftbus_enable) {
    external_deps += [ "dsoftbus:softbus_client" ]
  }

  public_external_deps = [ "background_task_mgr:bgtaskmgr_innerkits" ]

  if (background_task_mgr_continuous_task_enable) {
    external_deps += [ "background_task_mgr:bgtaskmgr_innerkits" ]
  }

  if (resource_schedule_service_enable) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
  }

  if (memmgr_override_enable) {
    external_deps += [ "memmgr:memmgrclient" ]
  }

  cflags_cc = []
  if (os_dlp_part_enabled) {
    cflags_cc += [ "-DWITH_DLP" ]
    external_deps += [
      "dlp_permission_service:libdlp_permission_sdk",
      "dlp_permission_service:libdlpparse",
    ]
  }

  defines = []

  if (ability_runtime_auto_fill) {
    defines += [ "SUPPORT_AUTO_FILL" ]
  }

  if (ability_runtime_child_process) {
    defines += [ "SUPPORT_CHILD_PROCESS" ]
  }

  if (ability_runtime_graphics) {
    defines += [ "SUPPORT_GRAPHICS" ]
    external_deps += [
      "ability_base:session_info",
      "i18n:intl_util",
      "icu:shared_icuuc",
      "image_framework:image_native",
      "input:libmmi-client",
      "resource_management:global_resmgr",
      "window_manager:libdm",
      "window_manager:libmodal_system_ui_extension_client",
      "window_manager:libwm",
      "window_manager:libwsutils",
      "window_manager:scene_session",
      "window_manager:sms",
    ]
  }

  if (ability_runtime_graphics && ability_runtime_screenlock_enable) {
    defines += [
      "ABILITY_RUNTIME_SCREENLOCK_ENABLE"
    ]
    external_deps += [
      "screenlock_mgr:screenlock_client",
    ]
  }

  if (ability_runtime_upms) {
    defines += [ "SUPPORT_UPMS" ]
    deps += [
      "${ability_runtime_innerkits_path}/uri_permission:uri_permission_mgr",
    ]
  }

  if (ability_runtime_feature_sandboxmanager) {
    external_deps += [ "sandbox_manager:libsandbox_manager_sdk" ]
    defines += [
      "ABILITY_RUNTIME_FEATURE_SANDBOXMANAGER",
      "SUPPORT_APP_SELECTOR"
    ]
  }

  if (include_app_domain_verify) {
    external_deps += [
      "app_domain_verify:app_domain_verify_common",
      "app_domain_verify:app_domain_verify_mgr_client",
    ]
    defines += [ "APP_DOMAIN_VERIFY_ENABLED" ]
  }

  if (ability_runtime_power) {
    defines += [ "SUPPORT_POWER" ]
    external_deps += [ "power_manager:powermgr_client" ]
  }

  if (ability_runtime_graphics &&
      ability_runtime_start_window_options_with_pixelmap) {
    defines += [ "START_WINDOW_OPTIONS_WITH_PIXELMAP" ]
    external_deps += [ "image_framework:image_native" ]
  }

  if (ability_runtime_no_screen) {
    defines += ["DISABLE_LAUNCHER"]
  }
}

group("unittest") {
  testonly = true
  deps = [ ":ability_manager_service_third_test" ]
}
