# Copyright (c) 2022-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_out_path = "ability_runtime/ability_runtime/ability_call_test"

###############################################################################

config("module_private_config") {
  visibility = [ ":*" ]
}

ohos_unittest("ability_context_impl_test") {
  module_out_path = module_out_path

  include_dirs = [
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_ability_runtime_test/AMS",
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_native_test/include",
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_runtime/context/",
  ]

  sources = [
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_ability_runtime_test/AMS/mock_ability_manager_client.cpp",
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_ability_runtime_test/AMS/mock_serviceability_manager_service.cpp",
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_native_test/include/sys_mgr_client_mock.cpp",
    "${ability_runtime_test_path}/unittest/frameworks_kits_ability_ability_runtime_test/mock_context.cpp",
    "ability_context_impl_test.cpp",
  ]

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_innerkits_path}/ability_manager:mission_info",
    "${ability_runtime_native_path}/ability:ability_context_native",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
    "ipc:ipc_napi",
    "napi:ace_napi",
    "resource_management:global_resmgr",
    "samgr:samgr_proxy",
  ]

  if (ability_runtime_graphics) {
    external_deps += [
      "window_manager:libwsutils",
      "window_manager:scene_session",
    ]
  }
}

ohos_unittest("ability_context_test1") {
  module_out_path = module_out_path

  include_dirs = [
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_runtime/",
  ]

  sources = [ "ability_context_test.cpp" ]

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_innerkits_path}/ability_manager:mission_info",
    "${ability_runtime_native_path}/ability:ability_context_native",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
    "ipc:ipc_napi",
    "napi:ace_napi",
    "resource_management:global_resmgr",
    "samgr:samgr_proxy",
  ]

  if (ability_runtime_graphics) {
    external_deps += [
      "window_manager:libwsutils",
      "window_manager:scene_session",
    ]
  }
}

ohos_unittest("caller_call_back_ut_test") {
  module_out_path = module_out_path
  sources = [ "caller_call_back_ut_test.cpp" ]

  deps = [
    "${ability_runtime_native_path}/ability:ability_context_native",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
  ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "googletest:gtest_main",
    "napi:ace_napi",
  ]
}

ohos_unittest("local_call_container_ut_test") {
  module_out_path = module_out_path

  include_dirs = [ "${ability_runtime_test_path}/mock/frameworks_kits_ability_ability_runtime_test/AMS" ]

  sources = [
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_ability_runtime_test/AMS/mock_ability_manager_client.cpp",
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_ability_runtime_test/AMS/mock_serviceability_manager_service.cpp",
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_native_test/include/sys_mgr_client_mock.cpp",
    "local_call_container_ut_test.cpp",
  ]

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_native_path}/ability:ability_context_native",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:want",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
    "ipc:ipc_napi",
    "napi:ace_napi",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("local_call_record_ut_test") {
  module_out_path = module_out_path

  include_dirs = [ "${ability_runtime_test_path}/mock/frameworks_kits_ability_ability_runtime_test/AMS" ]

  sources = [
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_ability_runtime_test/AMS/mock_ability_manager_client.cpp",
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_ability_runtime_test/AMS/mock_serviceability_manager_service.cpp",
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_native_test/include/sys_mgr_client_mock.cpp",
    "local_call_record_ut_test.cpp",
  ]

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_native_path}/ability:ability_context_native",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:want",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
    "ipc:ipc_napi",
    "napi:ace_napi",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("dialog_callback_test") {
  module_out_path = module_out_path

  include_dirs = [
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_native_test/include",
    "${ability_runtime_path}/interfaces/kits/native/ability/native/dialog_request_callback",
  ]

  sources = [
    "${ability_runtime_path}/frameworks/native/ability/ability_runtime/dialog_request_callback_impl.cpp",
    "${ability_runtime_path}/frameworks/native/ability/ability_runtime/dialog_ui_extension_callback.cpp",
    "dialog_ui_extension_callback_test.cpp",
  ]

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_native_path}/ability:ability_context_native",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_native_path}/ability/native:dialog_request_callback",
  ]

  external_deps = [
    "ability_base:want",
    "ace_engine:ace_uicontent",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
    "napi:ace_napi",
  ]
}

################################################################################
group("unittest") {
  testonly = true
  deps = []

  deps += [
    ":ability_context_impl_test",
    ":ability_context_test1",
    ":caller_call_back_ut_test",
    ":dialog_callback_test",
    ":local_call_container_ut_test",
    ":local_call_record_ut_test",
  ]
}
