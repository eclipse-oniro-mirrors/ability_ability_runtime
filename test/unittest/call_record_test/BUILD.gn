# Copyright (c) 2023-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/ability_runtime/abilitymgr"

ohos_unittest("call_record_test") {
  module_out_path = module_output_path
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  include_dirs = [
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_ability_runtime_test/AMS",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/ability_scheduler_mock",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/system_ability_mock",
  ]

  sources = [
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_ability_runtime_test/AMS/mock_serviceability_manager_service.cpp",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core/src/appmgr/mock_app_scheduler.cpp",
    "./call_record_test.cpp",  # add mock file
  ]

  configs = [
    "${ability_runtime_services_path}/abilitymgr:abilityms_config",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test:aafwk_mock_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core:appexecfwk_appmgr_mock",
  ]

  external_deps = [
    "ability_base:want",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "hilog:libhilog",
    "napi:ace_napi",
    "samgr:samgr_proxy",
  ]

  if (background_task_mgr_continuous_task_enable) {
    external_deps += [ "background_task_mgr:bgtaskmgr_innerkits" ]
  }
}

group("unittest") {
  testonly = true

  deps = [ ":call_record_test" ]
}
