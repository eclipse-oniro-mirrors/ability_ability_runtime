# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/abilitymgr"

ohos_unittest("data_ability_manager_test") {
  module_out_path = module_output_path

  include_dirs = [
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_bundle_manager_helper",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/include",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/system_ability_mock",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/ability_scheduler_mock",
    "${distributedschedule_path}/samgr/interfaces/innerkits/samgr_proxy/include",
    "${ability_runtime_innerkits_path}/ability_manager/include",
    "${ability_runtime_path}/interfaces/kits/native/ability/native",
    "${ability_runtime_services_path}/common/include",
  ]

  sources = [
    "${ability_runtime_services_path}/abilitymgr/src/ability_auto_startup_data_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_auto_startup_service.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_manager_event_subscriber.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/app_scheduler.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/extension_config.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/rdb/ability_resident_process_rdb.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/rdb/parser_util.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/rdb/rdb_data_manager.cpp",
    "data_ability_manager_test.cpp",  # add mock file
  ]

  configs = [
    "${ability_runtime_services_path}/abilitymgr:abilityms_config",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test:aafwk_mock_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_innerkits_path}/ability_manager:ability_start_setting",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_native_path}/ability/native:auto_startup_callback",
    "${ability_runtime_native_path}/appkit:appkit_manager_helper",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "${ability_runtime_services_path}/common:app_util",
    "${ability_runtime_services_path}/common:perm_verification",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/aakit:aakit_mock",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core:appexecfwk_appmgr_mock",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbeget_proxy",
    "ipc:ipc_core",
    "kv_store:distributeddata_inner",
    "napi:ace_napi",
    "relational_store:native_rdb",
    "window_manager:session_manager_lite",
  ]

  if (background_task_mgr_continuous_task_enable) {
    external_deps += [ "background_task_mgr:bgtaskmgr_innerkits" ]
  }

  if (ability_runtime_graphics) {
    external_deps += [ "window_manager:libwm" ]
  }

  cflags_cc = []
  if (os_dlp_part_enabled) {
    cflags_cc += [ "-DWITH_DLP" ]
  }
}

group("unittest") {
  testonly = true
  deps = [ ":data_ability_manager_test" ]
}
