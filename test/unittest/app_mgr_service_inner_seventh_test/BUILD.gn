# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/ability_runtime/appmgrservice"

ohos_unittest("app_mgr_service_inner_seventh_test") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  module_out_path = module_output_path
  use_exceptions = true

  include_dirs = [
    "mock/include",
    "${ability_runtime_innerkits_path}/app_manager/include/appmgr",
    "${ability_runtime_services_path}/abilitymgr/include/utils",
    "${ability_runtime_services_path}/abilitymgr/include",
    "${ability_runtime_services_path}/appdfr/include",
    "${ability_runtime_services_path}/appmgr/include",
    "${ability_runtime_services_path}/appmgr/include/utils",
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_bundle_manager_helper",
    "${ability_runtime_path}/utils/global/time/include",
    "${ability_runtime_path}/tools/aa/include",
    "${ability_runtime_utils_path}/global/constant",
  ]

  sources = [
    #"${ability_runtime_services_path}/abilitymgr/src/ability_connect_callback_stub.cpp",
    "${ability_runtime_path}/tools/aa/src/shell_command_result.cpp",
    "${ability_runtime_path}/tools/aa/src/test_observer_proxy.cpp",
    "${ability_runtime_services_path}/appmgr/src/ability_running_record.cpp",
    "${ability_runtime_services_path}/appmgr/src/advanced_security_mode_manager.cpp",
    "${ability_runtime_services_path}/appmgr/src/ams_mgr_scheduler.cpp",
    "${ability_runtime_services_path}/appmgr/src/app_config_data_manager.cpp",
    "${ability_runtime_services_path}/appmgr/src/app_death_recipient.cpp",
    "${ability_runtime_services_path}/appmgr/src/app_debug_manager.cpp",
    "${ability_runtime_services_path}/appmgr/src/app_lifecycle_deal.cpp",
    "${ability_runtime_services_path}/appmgr/src/app_mgr_event.cpp",
    "${ability_runtime_services_path}/appmgr/src/app_mgr_service.cpp",
    "${ability_runtime_services_path}/appmgr/src/app_mgr_service_event_handler.cpp",
    "${ability_runtime_services_path}/appmgr/src/app_mgr_service_inner.cpp",
    "${ability_runtime_services_path}/appmgr/src/app_native_spawn_manager.cpp",
    "${ability_runtime_services_path}/appmgr/src/app_preloader.cpp",
    "${ability_runtime_services_path}/appmgr/src/app_running_status_module.cpp",
    "${ability_runtime_services_path}/appmgr/src/app_state_observer_manager.cpp",
    "${ability_runtime_services_path}/appmgr/src/cache_process_manager.cpp",
    "${ability_runtime_services_path}/appmgr/src/child_process_record.cpp",
    "${ability_runtime_services_path}/appmgr/src/exit_resident_process_manager.cpp",
    "${ability_runtime_services_path}/appmgr/src/killing_process_manager.cpp",
    "${ability_runtime_services_path}/appmgr/src/modal_system_app_freeze_uiextension.cpp",
    "${ability_runtime_services_path}/appmgr/src/module_running_record.cpp",
    "${ability_runtime_services_path}/appmgr/src/multi_user_config_mgr.cpp",
    "${ability_runtime_services_path}/appmgr/src/quick_fix_callback_with_record.cpp",
    "${ability_runtime_services_path}/appmgr/src/render_record.cpp",
    "${ability_runtime_services_path}/appmgr/src/render_state_observer_manager.cpp",
    "${ability_runtime_services_path}/appmgr/src/window_focus_changed_listener.cpp",
    "${ability_runtime_services_path}/appmgr/src/window_pid_visibility_changed_listener.cpp",
    "${ability_runtime_services_path}/appmgr/src/window_visibility_changed_listener.cpp",
    "app_mgr_service_inner_seventh_test.cpp",
    "mock/src/mock_accesstoken_kit.cpp",
    "mock/src/mock_app_running_manager.cpp",
    "mock/src/mock_app_running_record.cpp",
    "mock/src/mock_app_spawn_client.cpp",
    "mock/src/mock_bundle_mgr_helper.cpp",
    "mock/src/mock_ipc_skeleton.cpp",
    "mock/src/mock_my_status.cpp",
    "mock/src/mock_parameters.cpp",
    "mock/src/mock_permission_verification.cpp",
    "mock/src/mock_remote_client_manager.cpp",
    "mock/src/mock_user_record_manager.cpp",
  ]

  configs = []

  deps = [
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_innerkits_path}/deps_wrapper:ability_deps_wrapper",
    "${ability_runtime_native_path}/appkit:appkit_manager_helper",
    "${ability_runtime_path}/utils/global/freeze:freeze_util",
    "${ability_runtime_path}/utils/server/startup:startup_util",
    "${ability_runtime_services_path}/appmgr:libappms",
    "${ability_runtime_services_path}/common:app_util",
    "${ability_runtime_services_path}/common:event_report",
    "${ability_runtime_services_path}/common:perm_verification",
    "${ability_runtime_services_path}/common:res_sched_util",
    "${ability_runtime_services_path}/common:task_handler_wrap",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_base:zuri",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "appspawn:appspawn_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "i18n:i18n_sa_client",
    "image_framework:image_native",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "kv_store:distributeddata_inner",
    "kv_store:distributeddata_mgr",
    "memmgr:memmgrclient",
    "memory_utils:libmeminfo",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
    "window_manager:session_manager_lite",
  ]
  defines = []
  if (ability_runtime_child_process) {
    defines += [ "SUPPORT_CHILD_PROCESS" ]
  }
  if (ability_runtime_graphics) {
    defines += [ "SUPPORT_GRAPHICS" ]
    external_deps += [
      "i18n:intl_util",
      "window_manager:libwm",
      "window_manager:libwsutils",
    ]
  }

  if (background_task_mgr_continuous_task_enable) {
    defines += [ "BGTASKMGR_CONTINUOUS_TASK_ENABLE" ]
  }

  if (ability_runtime_feature_sandboxmanager) {
    external_deps += [ "sandbox_manager:libsandbox_manager_sdk" ]
    defines += [ "ABILITY_RUNTIME_FEATURE_SANDBOXMANAGER" ]
  }
  cflags_cc = []

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  if (os_dlp_part_enabled) {
    cflags_cc += [ "-DWITH_DLP" ]
  }
}

group("unittest") {
  testonly = true

  deps = [ ":app_mgr_service_inner_seventh_test" ]
}
