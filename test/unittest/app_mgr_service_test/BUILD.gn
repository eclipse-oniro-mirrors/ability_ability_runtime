# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/appmgr"

ohos_unittest("app_mgr_service_test") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  module_out_path = module_output_path

  include_dirs = [
    "${ability_runtime_test_path}/mock/mock_appmgr_service/include",
    "${ability_runtime_test_path}/mock/common/include",
    "${ability_runtime_test_path}/mock/mock_sa_call",
  ]

  sources = [
    "${ability_runtime_test_path}/mock/common/src/mock_native_token.cpp",
    "app_mgr_service_test.cpp",
  ]

  configs = [ "${ability_runtime_services_path}/appmgr:appmgr_config" ]

  deps = [
    "${ability_runtime_native_path}/appkit:appkit_native",
    "${ability_runtime_services_path}/appmgr:libappms",
    "${ability_runtime_services_path}/common:app_util",
    "${ability_runtime_services_path}/common:task_handler_wrap",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "appspawn:appspawn_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "napi:ace_napi",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  defines = []
  if (background_task_mgr_continuous_task_enable) {
    defines += [ "BGTASKMGR_CONTINUOUS_TASK_ENABLE" ]
  }

  if (ability_command_for_test) {
    defines += [ "ABILITY_COMMAND_FOR_TEST" ]
  }

  if (ability_runtime_graphics) {
    external_deps += [ "window_manager:libwm" ]
  }
}

group("unittest") {
  testonly = true

  deps = [ ":app_mgr_service_test" ]
}
