# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

ohos_unittest("window_focus_changed_listener_test") {
  module_out_path = "ability_runtime/ability_runtime/extension"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  sources = [
    "${ability_runtime_path}/services/abilitymgr/src/window_focus_changed_listener.cpp",
    "${ability_runtime_path}/services/common/src/task_handler_wrap.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/extension_record/extension_record_factory.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/lifecycle_deal.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ui_extension_record/ui_extension_record_factory.cpp",
    "${ability_runtime_services_path}/common/src/ffrt_task_handler_wrap.cpp",
    "${ability_runtime_services_path}/common/src/queue_task_handler_wrap.cpp",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core/src/appmgr/mock_app_scheduler.cpp",
    "window_focus_changed_listener_test.cpp",
  ]

  cflags = []

  include_dirs = [
    "${ability_runtime_path}/services/abilitymgr/include",
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_native_test/include",
    "${ability_runtime_test_path}/mock/services_appmgr_test/include",
    "${ability_runtime_path}/interfaces/kits/native/ability/native/ui_extension_ability",
    "${ability_runtime_services_path}/appdfr/include",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/system_ability_mock",
    "${ability_runtime_test_path}/mock/common/include",
  ]

  configs = [
    "${ability_runtime_services_path}/abilitymgr:abilityms_config",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test:aafwk_mock_config",
  ]

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_innerkits_path}/ability_manager:ability_start_options",
    "${ability_runtime_innerkits_path}/ability_manager:ability_start_setting",
    "${ability_runtime_innerkits_path}/ability_manager:mission_info",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_native_path}/ability/native:auto_startup_callback",
    "${ability_runtime_native_path}/ability/native:ui_extension",
    "${ability_runtime_native_path}/appkit:app_context",
    "${ability_runtime_native_path}/appkit:appkit_native",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "${ability_runtime_services_path}/abilitymgr:mission_list",
    "${ability_runtime_services_path}/common:perm_verification",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/aakit:aakit_mock",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core:appexecfwk_appmgr_mock",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core:appexecfwk_bundlemgr_mock",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:extractortool",
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_deps_wrapper",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "napi:ace_napi",
    "resource_management:global_resmgr",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
  ]

  if (ability_runtime_upms) {
    configs += [ "${ability_runtime_innerkits_path}/uri_permission:uripermkit_public_config" ]
    deps += [
      "${ability_runtime_innerkits_path}/uri_permission:uri_permission_mgr",
      "${ability_runtime_services_path}/uripermmgr:libupms_static",
    ]
  }
}

group("unittest") {
  testonly = true
  deps = [ ":window_focus_changed_listener_test" ]
}
