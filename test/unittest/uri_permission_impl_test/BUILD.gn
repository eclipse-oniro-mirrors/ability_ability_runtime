# Copyright (c) 2023-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/ability_runtime/abilitymgr"

ohos_unittest("uri_permission_impl_test") {
  module_out_path = module_output_path
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  include_dirs = [
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_bundle_manager_helper",
    "${ability_runtime_path}/services/uripermmgr/include",
    "${ability_runtime_test_path}/mock/common/include",
    "${ability_runtime_test_path}/mock/services_appmgr_test/include/",
    "mock/include",
  ]

  sources = [
    "${ability_runtime_path}/services/uripermmgr/src/batch_uri.cpp",
    "${ability_runtime_path}/services/uripermmgr/src/file_permission_manager.cpp",
    "${ability_runtime_path}/services/uripermmgr/src/tokenid_permission.cpp",
    "${ability_runtime_path}/services/uripermmgr/src/uri_permission_manager_stub_impl.cpp",
    "${ability_runtime_test_path}/mock/common/src/mock_native_token.cpp",
    "mock/src/mock_ability_manager_client.cpp",
    "mock/src/mock_accesstoken_kit.cpp",
    "mock/src/mock_app_utils.cpp",
    "mock/src/mock_bundle_mgr_helper.cpp",
    "mock/src/mock_iability_manager_collaborator.cpp",
    "mock/src/mock_ipc_skeleton.cpp",
    "mock/src/mock_my_flag.cpp",
    "mock/src/mock_permission_verification.cpp",
    "mock/src/mock_sandbox_manager.cpp",
    "mock/src/mock_udmf_utils.cpp",
    "mock/src/mock_uri_permission_utils.cpp",
    "batch_uri_test.cpp",
    "uri_permission_impl_test.cpp",
  ]

  configs = [
    "${ability_runtime_innerkits_path}/app_manager:appmgr_sdk_config",
    "${ability_runtime_innerkits_path}/uri_permission:uripermkit_public_config",
  ]

  deps = [
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_innerkits_path}/uri_permission:uri_permission_mgr",
    "${ability_runtime_services_path}/common:event_report",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:zuri",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "access_token:libtokenid_sdk",
    "app_file_service:fileuri_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
    "storage_service:storage_manager_sa_proxy",
  ]
  if (ability_runtime_feature_sandboxmanager) {
    external_deps += [ "sandbox_manager:libsandbox_manager_sdk" ]
    defines = [ "ABILITY_RUNTIME_FEATURE_SANDBOXMANAGER" ]
  }
  if (ability_runtime_udmf_enable) {
    defines += [ "ABILITY_RUNTIME_UDMF_ENABLE" ]
  }
  cflags_cc = []
  if (os_dlp_part_enabled) {
    cflags_cc += [ "-DWITH_DLP" ]
  }
}

ohos_unittest("uri_permission_manager_stub_impl_test") {
  module_out_path = module_output_path
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  include_dirs = [
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_bundle_manager_helper",
    "${ability_runtime_test_path}/mock/common/include",
    "${ability_runtime_test_path}/mock/services_appmgr_test/include/",
    "mock/include",
  ]

  sources = [
    "${ability_runtime_test_path}/mock/common/src/mock_native_token.cpp",
    "mock/src/mock_ability_manager_client.cpp",
    "mock/src/mock_my_flag.cpp",
    "mock/src/mock_uri_permission_utils.cpp",
    "mock/src/mock_iability_manager_collaborator.cpp",
    "uri_permission_manager_stub_impl_test.cpp",
  ]

  configs = [
    "${ability_runtime_innerkits_path}/app_manager:appmgr_sdk_config",
    "${ability_runtime_innerkits_path}/uri_permission:uripermkit_public_config",
  ]

  deps = [
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_innerkits_path}/deps_wrapper:ability_deps_wrapper",
    "${ability_runtime_innerkits_path}/uri_permission:uri_permission_mgr",
    "${ability_runtime_native_path}/appkit:appkit_manager_helper",
    "${ability_runtime_services_path}/common:app_util",
    "${ability_runtime_services_path}/common:event_report",
    "${ability_runtime_services_path}/common:perm_verification",
    "${ability_runtime_services_path}/uripermmgr:libupms_static",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_base:zuri",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "access_token:libtokenid_sdk",
    "app_file_service:fileuri_native",
    "background_task_mgr:bgtaskmgr_innerkits",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:color_manager",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "relational_store:native_dataability",
    "relational_store:native_rdb",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
    "storage_service:storage_manager_sa_proxy",
  ]
  if (ability_runtime_feature_sandboxmanager) {
    external_deps += [ "sandbox_manager:libsandbox_manager_sdk" ]
    defines = [ "ABILITY_RUNTIME_FEATURE_SANDBOXMANAGER" ]
  }
  if (ability_runtime_udmf_enable) {
    defines += [ "ABILITY_RUNTIME_UDMF_ENABLE" ]
  }
  cflags_cc = []
  if (os_dlp_part_enabled) {
    cflags_cc += [ "-DWITH_DLP" ]
  }
}

ohos_unittest("upms_udmf_utils_test") {
  module_out_path = module_output_path
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  include_dirs = [
    "mock/include",
  ]

  sources = [
    "${ability_runtime_services_path}/uripermmgr/src/upms_udmf_utils.cpp",
    "mock/src/mock_my_flag.cpp",
    "mock/src/mock_uri_permission_utils.cpp",
    "mock/src/udmf_client.cpp",
    "udmf_utils_test.cpp",
  ]

  configs = [
    "${ability_runtime_services_path}/common:common_config",
    "${ability_runtime_services_path}/uripermmgr:upms_config",
  ]

  deps = []

  external_deps = [
    "ability_base:zuri",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "access_token:libtokenid_sdk",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
  ]
  cflags_cc = []
}

group("unittest") {
  testonly = true

  deps = [
    ":upms_udmf_utils_test",
    ":uri_permission_impl_test",
    ":uri_permission_manager_stub_impl_test",
  ]
}
