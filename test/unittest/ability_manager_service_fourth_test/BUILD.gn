# Copyright (c) 2022-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/ability_runtime/abilitymgr"

ohos_unittest("ability_manager_service_fourth_test") {
  module_out_path = module_output_path
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"

  include_dirs = [
    "${ability_runtime_innerkits_path}/uri_permission/include",
    "${ability_runtime_path}/interfaces/kits/native/ability/ability_runtime/",
    "${ability_runtime_path}/interfaces/inner_api/ability_manager/include",
    "${ability_runtime_path}/services/abilitymgr/include/interceptor/",
    "${ability_runtime_services_path}/abilitymgr/include/utils",
    "${ability_runtime_services_path}/abilitymgr/include",
    "${ability_runtime_path}/services/abilitymgr/include/insight_intent",
    "${ability_runtime_services_path}/common/include",
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_native_test/include",
    "${ability_runtime_services_path}/uripermmgr/include",
    "mock/include",
  ]

  sources = [
    "${ability_runtime_innerkits_path}/uri_permission/src/uri_permission_load_callback.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_auto_startup_data_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_auto_startup_service.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_bundle_event_callback.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/utils/hmsf_utils.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/insight_intent/insight_intent_rdb_data_mgr.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/insight_intent/insight_intent_rdb_storage_mgr.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/insight_intent/insight_intent_db_cache.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/insight_intent/extract_insight_intent_profile.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/insight_intent/insight_intent_event_mgr.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_connect_callback_stub.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/auto_startup_info.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/exit_reason.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/insight_intent/insight_intent_execute_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/modal_system_dialog/modal_system_dialog_ui_extension.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/utils/ability_event_util.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/utils/modal_system_dialog_util.cpp",
    "${ability_runtime_services_path}/common/src/ffrt_task_handler_wrap.cpp",
    "${ability_runtime_services_path}/common/src/queue_task_handler_wrap.cpp",
    "${ability_runtime_services_path}/common/src/task_handler_wrap.cpp",
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_native_test/include/mock_ability_manager_client.cpp",
    "ability_manager_service_fourth_test.cpp",
    "mock/src/mock_ability_interceptor_executer.cpp",
    "mock/src/mock_ipc_skeleton.cpp",
    "mock/src/mock_my_flag.cpp",
    "mock/src/mock_parameters.cpp",
    "mock/src/mock_permission_verification.cpp",
  ]

  configs = [ "${ability_runtime_services_path}/abilitymgr:abilityms_config" ]

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_start_setting",
    "${ability_runtime_innerkits_path}/ability_manager:mission_info",
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_innerkits_path}/deps_wrapper:ability_deps_wrapper",
    "${ability_runtime_innerkits_path}/uri_permission:uri_permission_mgr",
    "${ability_runtime_native_path}/ability/native:auto_startup_callback",
    "${ability_runtime_native_path}/appkit:appkit_manager_helper",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "${ability_runtime_services_path}/common:app_util",
    "${ability_runtime_services_path}/common:event_report",
    "${ability_runtime_services_path}/common:perm_verification",
    "${ability_runtime_services_path}/common:task_handler_wrap",
    "${ability_runtime_services_path}/common:user_controller",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "bundle_framework:libappexecfwk_common",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_core",
    "kv_store:distributeddata_inner",
    "relational_store:native_dataability",
    "safwk:api_cache_manager",
    "samgr:samgr_proxy",
  ]

  if (ability_runtime_graphics) {
    external_deps += [
      "window_manager:libdm",
      "window_manager:libwsutils",
      "window_manager:scene_session",
    ]
  }
  cflags_cc = []
  if (os_dlp_part_enabled) {
    cflags_cc += [ "-DWITH_DLP" ]
  }
}

group("unittest") {
  testonly = true
  deps = [ ":ability_manager_service_fourth_test" ]
}
