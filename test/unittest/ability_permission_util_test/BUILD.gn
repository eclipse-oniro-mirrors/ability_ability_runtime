# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/ability_runtime/abilitymgr"

ohos_unittest("ability_permission_util_test") {
  module_out_path = module_output_path

  include_dirs = [
    "${ability_runtime_path}/interfaces/kits/native/ability/ability_runtime/",
    "${ability_runtime_path}/interfaces/inner_api/ability_manager/include",
    "${ability_runtime_test_path}/mock/ability_manager_collaborator",
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_native_test/include",
    "${ability_runtime_test_path}/mock/mock_sa_call",
    "${ability_runtime_test_path}/mock/prepare_terminate_callback",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/aakit/include",
    "${ability_runtime_test_path}/unittest/app_debug_listener_stub_test",
    "mock/include",
  ]

  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
  ]

  configs = [ "${ability_runtime_services_path}/abilitymgr:abilityms_config" ]

  sources = [
    "ability_permission_util_test.cpp",
    "mock/src/mock_my_flag.cpp",
    "mock/src/mock_permission_verification.cpp",
  ]

  deps = [
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "${ability_runtime_services_path}/common:app_util",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:configuration",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_deps_wrapper",
    "access_token:libaccesstoken_sdk",
    "appspawn:appspawn_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "dsoftbus:softbus_client",
    "ffrt:libffrt",
    "googletest:gtest_main",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "json:nlohmann_json_static",
    "jsoncpp:jsoncpp",
    "kv_store:distributeddata_mgr",
    "memory_utils:libmeminfo",
    "napi:ace_napi",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

group("unittest") {
  testonly = true

  deps = [ ":ability_permission_util_test" ]
}
