# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/ability_runtime/abilitymgr"

ohos_unittest("extension_record_factory_test") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  module_out_path = module_output_path

  include_dirs = [
    "${ability_runtime_services_path}/appdfr/include",
    "${ability_runtime_path}/interfaces/kits/native/ability/native/ui_service_extension_ability",
    "${ability_runtime_path}/interfaces/kits/native/ability/native/ui_service_extension_ability/connection",
    "${ability_runtime_path}/interfaces/inner_api/runtime/include",
    "${ability_runtime_path}/frameworks/native/ability/native/ui_service_extension_ability",
  ]

  sources = [
    "${ability_runtime_services_path}/abilitymgr/src/extension_record/extension_record_factory.cpp",
    "extension_record_factory_test.cpp",
  ]

  configs = [
    "${ability_runtime_services_path}/common:common_config",
    "${ability_runtime_services_path}/abilitymgr:abilityms_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_innerkits_path}/ability_manager:ability_start_options",
    "${ability_runtime_innerkits_path}/ability_manager:ability_start_setting",
    "${ability_runtime_innerkits_path}/ability_manager:mission_info",
    "${ability_runtime_native_path}/ability:ability_context_native",
    "${ability_runtime_native_path}/ability/native:ability_business_error",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_native_path}/ability/native:abilitykit_utils",
    "${ability_runtime_native_path}/ability/native:auto_startup_callback",
    "${ability_runtime_native_path}/ability/native:service_extension",
    "${ability_runtime_native_path}/ability/native:ui_service_extension",
    "${ability_runtime_native_path}/ability/native:ui_service_extension_connection",
    "${ability_runtime_native_path}/appkit:app_context",
    "${ability_runtime_native_path}/appkit:appkit_native",
    "${ability_runtime_path}/utils/global/freeze:freeze_util",
    "${ability_runtime_path}/utils/server/startup:startup_util",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "${ability_runtime_services_path}/abilitymgr:mission_list",
    "${ability_runtime_services_path}/common:app_util",
    "${ability_runtime_services_path}/common:perm_verification",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:extractortool",
    "ability_base:session_info",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "access_token:libtokenid_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "i18n:intl_util",
    "init:libbegetutil",
    "ipc:ipc_core",
    "json:nlohmann_json_static",
    "jsoncpp:jsoncpp",
    "kv_store:distributeddata_inner",
    "napi:ace_napi",
    "relational_store:native_rdb",
    "samgr:samgr_proxy",
    "samgr:samgr_proxy",
    "window_manager:libwsutils",
  ]

  if (ability_runtime_upms) {
    deps += [
      "${ability_runtime_innerkits_path}/uri_permission:uri_permission_mgr",
      "${ability_runtime_services_path}/uripermmgr:libupms_static",
    ]
  }
  if (background_task_mgr_continuous_task_enable) {
    external_deps += [ "background_task_mgr:bgtaskmgr_innerkits" ]
  }
}

group("unittest") {
  testonly = true

  deps = [ ":extension_record_factory_test" ]
}
