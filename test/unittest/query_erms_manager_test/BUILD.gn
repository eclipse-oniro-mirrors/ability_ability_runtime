# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/ability_runtime/abilitymgr"

ohos_unittest("query_erms_manager_test") {
  module_out_path = module_output_path
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  include_dirs = [
    "${ability_runtime_services_path}/abilitymgr/include",
    "mock",
  ]

  sources = [
    "${ability_runtime_services_path}/abilitymgr/src/query_erms_manager.cpp",
    "mock/mockquery_erms_observer_manager.cpp",
    "query_erms_manager_test.cpp",
  ]

  configs = [ "${ability_runtime_services_path}/abilitymgr:abilityms_config" ]

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_innerkits_path}/ability_manager:ability_start_options",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "${ability_runtime_services_path}/abilitymgr:wantagent_manager",
    "${ability_runtime_services_path}/common:event_report",
    "${ability_runtime_services_path}/common:perm_verification",
    "${ability_runtime_services_path}/common:task_handler_wrap",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "napi:ace_napi",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (background_task_mgr_continuous_task_enable) {
    external_deps += [ "background_task_mgr:bgtaskmgr_innerkits" ]
  }
}

group("unittest") {
  testonly = true

  deps = [ ":query_erms_manager_test" ]
}
