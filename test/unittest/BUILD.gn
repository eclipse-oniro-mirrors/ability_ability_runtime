# Copyright (c) 2022-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")
import(
    "//foundation/ability/ability_runtime/services/abilitymgr/abilitymgr.gni")

config("appmgr_test_config") {
  configs = [
    "${ability_runtime_services_path}/appmgr:appmgr_config",
    "${ability_runtime_innerkits_path}/app_manager:appmgr_sdk_config",
    "${ability_runtime_test_path}/moduletest:services_mock_ams_config",
  ]

  defines = [ "AMS_LOG_TAG = \"AppMgrService\"" ]

  include_dirs = [
    "${ability_runtime_services_path}/appdfr/include",
    "${ability_runtime_test_path}/mock/services_appmgr_test/include",
  ]
}

ohos_source_set("appmgr_test_source") {
  testonly = true

  sources = [
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/app_launch_data.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/app_mgr_proxy.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/app_mgr_stub.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/app_process_data.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/app_record_id.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/app_scheduler_host.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/app_scheduler_proxy.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/app_state_callback_host.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/app_state_callback_proxy.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/fault_data.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/native_child_notify_proxy.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/native_child_notify_stub.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/process_info.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/profile.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/render_scheduler_host.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/render_scheduler_proxy.cpp",
    "${ability_runtime_innerkits_path}/app_manager/src/appmgr/running_process_info.cpp",
  ]

  public_configs = [ ":appmgr_test_config" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_path}/utils/global/freeze:freeze_util",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:configuration",
    "ability_base:want",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "i18n:intl_util",
    "ipc:ipc_core",
    "json:nlohmann_json_static",
    "kv_store:distributeddata_inner",
    "kv_store:distributeddata_mgr",
    "samgr:samgr_proxy",
  ]

  if (ability_runtime_child_process) {
    defines = [ "SUPPORT_CHILD_PROCESS" ]
  }

  public_external_deps = [
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
  ]

  subsystem_name = "ability"
  part_name = "ability_runtime"
}

config("test_exception_config") {
  cflags_cc = [ "-fexceptions" ]
}

ohos_source_set("abilityms_test_source") {
  sources = [
    "${ability_runtime_services_path}/abilitymgr/src/ability_background_connection.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_bundle_event_callback.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_cache_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_connect_callback_stub.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_connect_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_debug_deal.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_event_handler.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_manager_collaborator_proxy.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_manager_proxy.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_manager_service.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_manager_stub.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_record.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_scheduler_proxy.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_scheduler_stub.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_token_stub.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/app_exit_reason_data_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/app_exit_reason_helper.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/assert_fault_callback_death_mgr.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/assert_fault_proxy.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/atomic_service_status_callback.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/atomic_service_status_callback_proxy.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/atomic_service_status_callback_stub.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/background_task_observer.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/call_container.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/call_record.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/caller_info.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/connection_observer_controller.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/connection_record.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/connection_state_item.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/connection_state_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/data_ability/data_ability_caller_recipient.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/data_ability/data_ability_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/data_ability/data_ability_record.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/dialog_session/dialog_session_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/dlp_state_item.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ecological_rule/ability_ecological_rule_mgr_service.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ecological_rule/ability_ecological_rule_mgr_service_param.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/exit_info_data_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/exit_reason.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/extension_record/extension_record.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/extension_record/extension_record_factory.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/extension_record/extension_record_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/free_install_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/insight_intent/insight_intent_execute_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/insight_intent/insight_intent_profile.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/insight_intent/insight_intent_utils.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/interceptor/ability_interceptor_executer.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/interceptor/ability_jump_interceptor.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/interceptor/control_interceptor.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/interceptor/crowd_test_interceptor.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/interceptor/disposed_rule_interceptor.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/interceptor/ecological_rule_interceptor.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/interceptor/start_other_app_interceptor.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/lifecycle_deal.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/pending_want_common_event.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/pending_want_key.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/pending_want_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/pending_want_record.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/resident_process_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/restart_app_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/scene_board/status_bar_delegate_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/scene_board/ui_ability_lifecycle_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/sender_info.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/start_ability_handler.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/start_ability_handler/start_ability_sandbox_savefile.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/sub_managers_helper.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/task_data_persistence_mgr.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ui_extension_record/ui_extension_record.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ui_extension_record/ui_extension_record_factory.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/user_controller.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/user_event_handler.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/utils/ability_event_util.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/utils/start_ability_utils.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/want_receiver_proxy.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/want_receiver_stub.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/want_sender_info.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/want_sender_proxy.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/want_sender_stub.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/wants_info.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/window_focus_changed_listener.cpp",
    "${ability_runtime_services_path}/common/src/event_report.cpp",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core/src/appmgr/app_mgr_client.cpp",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core/src/appmgr/app_state_callback_host.cpp",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core/src/appmgr/app_state_callback_proxy.cpp",
  ]

  include_dirs = [
    "${ability_runtime_services_path}/appdfr/include",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core",
    "${ability_runtime_innerkits_path}/app_manager/include/appmgr",
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_runtime/context",
    "${ability_runtime_path}/interfaces/kits/native/ability/native/distributed_ability_runtime",
    "${ability_runtime_innerkits_path}/dataobs_manager/include",
    "${ability_runtime_services_path}/abilitymgr/include/mission",
  ]

  cflags_cc = []
  configs = [ ":test_exception_config" ]

  public_configs = [
    "${ability_runtime_services_path}/abilitymgr:abilityms_config",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test:aafwk_mock_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_innerkits_path}/ability_manager:process_options",
    "${ability_runtime_innerkits_path}/ability_manager:start_window_option",
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_innerkits_path}/connectionobs_manager:connection_obs_manager",
    "${ability_runtime_innerkits_path}/deps_wrapper:ability_deps_wrapper",
    "${ability_runtime_path}/utils/global/freeze:freeze_util",
    "${ability_runtime_path}/utils/server/startup:startup_util",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "${ability_runtime_services_path}/common:app_util",
    "${ability_runtime_services_path}/common:task_handler_wrap",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:configuration",
    "ability_base:extractortool",
    "ability_base:view_data",
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "bundle_framework:libappexecfwk_common",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "dsoftbus:softbus_client",
    "ffrt:libffrt",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "jsoncpp:jsoncpp",
    "kv_store:distributeddata_inner",
    "relational_store:native_appdatafwk",
    "relational_store:native_dataability",
    "relational_store:native_rdb",
    "resource_management:global_resmgr",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libmodal_system_ui_extension_client",
    "window_manager:libwsutils",
    "window_manager:sms",
  ]

  defines = []
  if (resource_schedule_service_enable) {
    cflags_cc += [ "-RESOURCE_SCHEDULE_SERVICE_ENABLE" ]
    external_deps += [ "resource_schedule_service:ressched_client" ]
  }
  if (os_dlp_part_enabled) {
    cflags_cc += [ "-DWITH_DLP" ]
  }
  if (ability_runtime_child_process) {
    defines += [ "SUPPORT_CHILD_PROCESS" ]
  }

  if (ability_runtime_graphics) {
    sources += [
      "${ability_runtime_services_path}/abilitymgr/src/ability_first_frame_state_observer_manager.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/implicit_start_processor.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/inner_mission_info.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/mission/mission.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/mission/mission_data_storage.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/mission/mission_info.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/mission/mission_info_mgr.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/mission/mission_list.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/mission/mission_list_manager.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/mission/mission_listener_controller.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/mission/mission_listener_proxy.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/mission/mission_listener_stub.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/mission/mission_snapshot.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/remote_mission_listener_proxy.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/remote_mission_listener_stub.cpp",
      "${ability_runtime_services_path}/abilitymgr/src/system_dialog_scheduler.cpp",
      "${ability_runtime_services_path}/appdfr/src/application_anr_listener.cpp",
    ]
    external_deps += [
      "i18n:intl_util",
      "icu:shared_icuuc",
      "image_framework:image_native",
      "input:libmmi-client",
      "libjpeg-turbo:turbojpeg",
      "window_manager:libdm",
      "window_manager:libmodal_system_ui_extension_client",
      "window_manager:libwm",
      "window_manager:libwsutils",
      "window_manager:sms",
    ]
  }
  if (ability_runtime_upms) {
    defines += [ "SUPPORT_UPMS" ]
    sources +=
        [ "${ability_runtime_services_path}/abilitymgr/src/uri_utils.cpp" ]

    deps += [
      "${ability_runtime_innerkits_path}/uri_permission:uri_permission_mgr",
    ]
  }

  subsystem_name = "ability"
  part_name = "ability_runtime"
}

group("unittest") {
  testonly = true

  deps = [ "runtime_test:stsunittest" ]
  if (!use_libfuzzer) {
    deps += []

    if (ability_runtime_feature_sandboxmanager) {
      deps += []
    }

    if (ability_runtime_graphics) {
      deps += []
    }

    if (include_app_domain_verify) {
      deps += []
    }
  }
}
