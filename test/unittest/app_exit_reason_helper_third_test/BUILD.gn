# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/ability_runtime/abilitymgr"

ohos_unittest("app_exit_reason_helper_third_test") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  module_out_path = module_output_path

  include_dirs = [
    "${ability_runtime_services_path}/abilitymgr/include",
    "mock/include",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "${ability_runtime_path}/frameworks/native/appkit/ability_bundle_manager_helper/bundle_mgr_helper.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_cache_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/app_exit_reason_helper.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/mission/mission_info.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/mission/mission_list_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/process_options.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/scene_board/ui_ability_lifecycle_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/sub_managers_helper.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/ability_start_with_wait_observer_manager/ability_start_with_wait_observer_manager.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/utils/timeout_state_utils.cpp",
    "${ability_runtime_services_path}/abilitymgr/src/utils/request_id_util.cpp",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core/src/appmgr/mock_app_scheduler.cpp",
    "app_exit_reason_helper_third_test.cpp",
  ]

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_innerkits_path}/ability_manager:mission_info",
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_native_path}/appkit:appkit_manager_helper",
    "${ability_runtime_path}/utils/global/freeze:freeze_util",
    "${ability_runtime_path}/utils/server/startup:startup_util",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "${ability_runtime_services_path}/abilitymgr:mission_list",
    "${ability_runtime_services_path}/common:app_util",
    "${ability_runtime_services_path}/common:perm_verification",
    "${ability_runtime_services_path}/common:task_handler_wrap",
    "${ability_runtime_services_path}/common:user_controller",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "kv_store:distributeddata_inner",
    "napi:ace_napi",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
      "window_manager:libdm",
    "window_manager:libwsutils",
    "window_manager:session_manager_lite",
  ]
  cflags_cc = []
  if (os_dlp_part_enabled) {
    cflags_cc += [ "-DWITH_DLP" ]
  }
}

group("unittest") {
  testonly = true

  deps = [ ":app_exit_reason_helper_third_test" ]
}
