# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#####################hydra-fuzz###################
import("//build/config/features.gni")
import("//build/ohos.gni")
import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")
module_output_path = "ability_runtime/appmgr"

##############################fuzztest##########################################
ohos_fuzztest("AbilityAppMgrAppRunningManagerFuzzTest") {
  module_out_path = module_output_path

  cflags_cc = []
  fuzz_config_file = "${ability_runtime_test_path}/fuzztest/abilityappmgrapprunningmanager_fuzzer"
  include_dirs = [
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_bundle_manager_helper",
    "${distributedschedule_path}/samgr/interfaces/innerkits/samgr_proxy/include",
    "${distributedschedule_path}/samgr/adapter/interfaces/innerkits/include/",
    "${ability_runtime_innerkits_path}/app_manager/include/appmgr",
    "${ability_runtime_services_path}/abilitymgr/include",
    "${ability_runtime_services_path}/appmgr/include",
    "${ability_runtime_services_path}/common/include",
  ]
  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
  ]
  sources = [ "abilityappmgrapprunningmanager_fuzzer.cpp" ]

  configs = [ "${ability_runtime_services_path}/appmgr:appmgr_config" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_innerkits_path}/ability_manager:ability_start_options",
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_innerkits_path}/deps_wrapper:ability_deps_wrapper",
    "${ability_runtime_innerkits_path}/uri_permission:uri_permission_mgr",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_native_path}/appkit:appkit_manager_helper",
    "${ability_runtime_path}/utils/server/startup:startup_util",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "${ability_runtime_services_path}/appmgr:libappms",
    "${ability_runtime_services_path}/common:event_report",
    "${ability_runtime_services_path}/common:perm_verification",
    "${ability_runtime_services_path}/common:task_handler_wrap",
    "${windowmanager_path}/utils:libwmutil_static",
    "//third_party/jsoncpp:jsoncpp",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:configuration",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_deps_wrapper",
    "access_token:libaccesstoken_sdk",
    "appspawn:appspawn_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "dsoftbus:softbus_client",
    "ffrt:libffrt",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "kv_store:distributeddata_mgr",
    "memory_utils:libmeminfo",
    "napi:ace_napi",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (background_task_mgr_continuous_task_enable) {
    external_deps += [ "background_task_mgr:bgtaskmgr_innerkits" ]
  }

  if (ability_runtime_graphics) {
    external_deps += [
      "window_manager:libwm",
      "window_manager:libwsutils",
    ]
    defines = [ "SUPPORT_SCREEN" ]
  }
}

###############################################################################
group("fuzztest") {
  testonly = true
  deps = []
  deps += [
    # deps file
    ":AbilityAppMgrAppRunningManagerFuzzTest",
  ]
}
###############################################################################
