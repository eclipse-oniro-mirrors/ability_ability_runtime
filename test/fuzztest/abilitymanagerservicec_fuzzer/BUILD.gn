# Copyright (c) 2022-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#####################hydra-fuzz###################
import("//build/config/features.gni")
import("//build/ohos.gni")
import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")
module_output_path = "ability_runtime/abilitymgr"

##############################fuzztest##########################################
ohos_fuzztest("AbilityManagerServiceCFuzzTest") {
  module_out_path = module_output_path

  fuzz_config_file =
      "${ability_runtime_test_path}/fuzztest/abilitymanagerservicec_fuzzer"
  include_dirs = [
    "${ability_runtime_innerkits_path}/ability_manager/include",
    "${ability_runtime_innerkits_path}/dataobs_manager/include",
  ]
  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
  ]
  sources = [ "abilitymanagerservicec_fuzzer.cpp" ]

  configs = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager_public_config",
    "${ability_runtime_services_path}/abilitymgr:abilityms_config",
  ]

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_manager",
    "${ability_runtime_innerkits_path}/ability_manager:ability_start_options",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "input:libmmi-client",
    "ipc:ipc_core",
    "napi:ace_napi",
    "relational_store:native_dataability",
    "relational_store:native_rdb",
    "safwk:api_cache_manager",
    "samgr:samgr_proxy",
  ]

  if (ability_runtime_graphics) {
    deps += []
    external_deps += [
      "i18n:intl_util",
      "window_manager:libwm",
    ]
  }

  defines = []
  if (os_dlp_part_enabled) {
    defines += [ "WITH_DLP" ]
  }
  if (include_app_domain_verify) {
    defines += [ "APP_DOMAIN_VERIFY_ENABLED" ]
  }
  if (ability_runtime_power) {
    defines += [ "SUPPORT_POWER" ]
  }
  if (ability_command_for_test) {
    defines += [ "ABILITY_COMMAND_FOR_TEST" ]
  }
  if (ability_fault_and_exit_test) {
    defines += [ "ABILITY_FAULT_AND_EXIT_TEST" ]
  }
  if (ability_runtime_graphics) {
    defines += [
      "SUPPORT_GRAPHICS",
      "SUPPORT_SCREEN",
    ]
  }
  if (ability_runtime_upms) {
    deps += [
      "${ability_runtime_innerkits_path}/uri_permission:uri_permission_mgr",
    ]
  }
  if (background_task_mgr_continuous_task_enable) {
    defines += [ "BGTASKMGR_CONTINUOUS_TASK_ENABLE" ]
  }
  if (resource_schedule_service_enable) {
    defines += [ "RESOURCE_SCHEDULE_SERVICE_ENABLE" ]
  }
  if (is_asan || asan_detector) {
    defines += [ "SUPPORT_ASAN" ]
  }
}

###############################################################################
group("fuzztest") {
  testonly = true
  deps = []
  deps += [
    # deps file
    ":AbilityManagerServiceCFuzzTest",
  ]
}
###############################################################################
