# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/ability_connection"

copy("ability_connection_copy") {
    sources = [
      "${ability_runtime_path}/interfaces/kits/native/ability/ability_runtime/ability_connection.h",
      "${ability_runtime_path}/frameworks/native/ability/ability_runtime/ability_connection.cpp",
    ]
    outputs = [ "${target_gen_dir}/frameworks/native/ability/ability_runtime/ability_connection/{{source_file_part}}" ]
}

ohos_unittest("ability_connection_unit_test") {
  module_out_path = module_output_path

  include_dirs = [ 
    "${target_gen_dir}/frameworks/native/ability/ability_runtime/ability_connection",
    "../../mock_utils",
    "../../mock/ability_connect_callback",
    "../../mock/ability_connect_stub",
    "../../mock/ability_connect_callback_interface",
    "../../mock/ability_connect_callback_stub",
    "../../mock/connection_manager",
    "../../mock/element_name",
    "../../mock/hilog_tag_wrapper",
    "../../mock/iremote_broker",
    "../../mock/iremote_object",
    "../../mock/iremote_stub",
    "../../mock/string_wrapper",
    "../../mock/uri",
    "../../mock/want",
    "../../mock/want_params",
  ]

  sources =
      [ "${target_gen_dir}/frameworks/native/ability/ability_runtime/ability_connection/ability_connection.cpp" ]

  sources += [
    "ability_connection_unit_test.cpp",
  ]

  deps = [
    ":ability_connection_copy",
  ]

  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "jsoncpp:jsoncpp",
    "json:nlohmann_json_static"
  ]
}

group("unittest") {
  testonly = true
  deps = [ ":ability_connection_unit_test" ]
}