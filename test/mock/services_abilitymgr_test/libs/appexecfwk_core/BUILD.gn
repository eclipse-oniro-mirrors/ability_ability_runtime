# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

config("appexecfwk_core_mock_config") {
  include_dirs = [
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core/include/",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core/include/appmgr",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core/include/bundlemgr",
    "${ability_runtime_innerkits_path}/ability_manager/include",
    "${ability_runtime_services_path}/abilitymgr/include",
    "${ability_runtime_innerkits_path}/app_manager/include/appmgr",
    "${ability_runtime_path}/interfaces/kits/native/ability/native/",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/aakit/include/",
    "${ability_runtime_services_path}/common/include",
  ]
}

ohos_static_library("appexecfwk_appmgr_mock") {
  # sources = [ "src/appmgr/mock_app_manager.cpp" ]
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  configs = [ ":appexecfwk_core_mock_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [ "${ability_runtime_innerkits_path}/app_manager:app_manager" ]

  external_deps = [
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  subsystem_name = "ability"
  part_name = "ability_runtime"
}

ohos_source_set("appexecfwk_bundlemgr_mock") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  sources = [
    "src/bundlemgr/mock_app_control_manager.cpp",
    "src/bundlemgr/mock_bundle_manager.cpp",
  ]
  testonly = true
  configs = [
    ":appexecfwk_core_mock_config",
    "${ability_runtime_services_path}/common:common_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  subsystem_name = "ability"
  part_name = "ability_runtime"
}
