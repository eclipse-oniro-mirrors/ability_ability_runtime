# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

group("native_wantagent") {
  deps = [ ":wantagent_innerkits" ]
}

config("wantagent_innerkits_public_config") {
  visibility = [ ":*" ]
  visibility += [
    "${ability_runtime_innerkits_path}/wantagent/*",
    "${ability_runtime_napi_path}/inner/*",
    "${ability_runtime_native_path}/ability/native/*",
    "${ability_runtime_test_path}/fuzztest/*",
    "${device_usage_statistics_path}/*",
    "${distributed_notification_service_path}/*",
  ]

  include_dirs = [
    "${ability_runtime_path}/interfaces/kits/native/ability/native",
    "${ability_runtime_innerkits_path}/ability_manager/include",
    "${ability_runtime_innerkits_path}/wantagent/include",
    "${ability_runtime_services_path}/abilitymgr/include",
    "${ability_runtime_innerkits_path}/app_manager/include/appmgr",
    "${ability_runtime_path}/interfaces/kits/native/appkit/app",
    "${ability_runtime_path}/interfaces/kits/native/appkit",
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_runtime",
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_runtime/context",
  ]
}

ohos_shared_library("wantagent_innerkits") {
  include_dirs = [
    "${ability_runtime_services_path}/common/include",
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_bundle_manager_helper",
    "${ability_runtime_path}/interfaces/inner_api/deps_wrapper/include",
  ]

  sources = [
    "src/completed_dispatcher.cpp",
    "src/pending_want.cpp",
    "src/trigger_info.cpp",
    "src/want_agent.cpp",
    "src/want_agent_client.cpp",
    "src/want_agent_helper.cpp",
    "src/want_agent_info.cpp",
    "src/want_agent_log_wrapper.cpp",
  ]

  public_configs = [ ":wantagent_innerkits_public_config" ]

  deps = [
    "${ability_runtime_innerkits_path}/ability_manager:ability_start_options",
    "${ability_runtime_innerkits_path}/error_utils:ability_runtime_error_util",
    "${ability_runtime_services_path}/abilitymgr:wantagent_manager",
  ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "napi:ace_napi",
    "samgr:samgr_proxy",
  ]

  public_external_deps = [
    "ability_base:configuration",
    "ability_base:session_info",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "eventhandler:libeventhandler",
    "icu:shared_icuuc",
    "image_framework:image_native",
    "resource_management:global_resmgr",
  ]

  if (is_double_framework) {
    cflags = [ "-DCONFIG_DUAL_FRAMEWORK" ]
  }

  cflags_cc = []
  if (os_dlp_part_enabled) {
    cflags_cc += [ "-DWITH_DLP" ]
  }

  innerapi_tags = [
    "platformsdk",
    "sasdk",
  ]
  subsystem_name = "ability"
  part_name = "ability_runtime"
}
