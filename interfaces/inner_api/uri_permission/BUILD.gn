# Copyright (c) 2022-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/idl_tool/idl.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

config("uripermkit_public_config") {
  visibility = [ ":*" ]
  visibility += [ "${ability_runtime_test_path}/unittest/*" ]
  include_dirs = [
    "include",
    "${ability_runtime_services_path}/uripermmgr/include",
    "${target_gen_dir}",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
}

idl_gen_interface("uri_permission_manager_interface") {
  sources = [ "IUriPermissionManager.idl" ]
  log_domainid = "0xD001315"
  log_tag = "UriPermMgr"
  subsystem_name = "ability"
  part_name = "ability_runtime"
}

#build so
ohos_shared_library("uri_permission_mgr") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  configs = [ "${ability_runtime_services_path}/common:common_config" ]
  public_configs = [ ":uripermkit_public_config" ]

  sources = []
  output_values = get_target_outputs(":uri_permission_manager_interface")
  sources += filter_include(output_values, [ "*_proxy.cpp" ])
  sources += filter_include(output_values, [ "*_stub.cpp" ])

  deps = [ ":uri_permission_manager_interface" ]

  external_deps = [
    "ability_base:zuri",
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
  ]

  sources += [
    "src/uri_permission_load_callback.cpp",
    "src/uri_permission_manager_client.cpp",
    "src/uri_permission_raw_data.cpp",
  ]

  if (ability_runtime_feature_sandboxmanager) {
    external_deps += [ "sandbox_manager:libsandbox_manager_sdk" ]
    defines = [ "ABILITY_RUNTIME_FEATURE_SANDBOXMANAGER" ]
  }

  innerapi_tags = [ "platformsdk" ]
  subsystem_name = "ability"
  part_name = "ability_runtime"
}
